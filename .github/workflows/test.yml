name: Test, Build, Deploy

on:
  push:
    branches:
      - "**"
    paths:
      - "tubee/**"
      - "app.py"
      - "celery_worker.py"
      - "pyproject.toml"
      - "poetry.lock"
      - ".github/workflows/test.yml"
  pull_request:
  workflow_dispatch:

jobs:
  test:
    name: Test Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip poetry
          poetry config virtualenvs.create false
          poetry install --no-interaction --no-ansi

      - name: Testing
        run: |
          flask test --coverage

      - name: Report coverage
        uses: codecov/codecov-action@v3

  license:
    name: License Scan
    runs-on: ubuntu-latest
    if: ${{ github.event_path == 'pyproject.toml' || github.event_path == 'poetry.lock' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip poetry
          poetry config virtualenvs.create false
          poetry install --no-interaction --no-ansi

      - name: Export requirements.txt
        run: |
          poetry export --dev -f requirements.txt --output requirements.txt

      # FOSSA's API Key are meant to be exposed as to doc
      - name: Scan License
        uses: fossa-contrib/fossa-action@v1
        with:
          fossa-api-key: 2d7865a44aa575d857521faaee1a57f8

  build:
    name: Build and Push Image
    runs-on: ubuntu-latest
    needs: [test, license]
    if: |
      always()
      && (github.ref_name == 'main')
      && (github.event_name != 'pull_request')
      && (needs.test.result == 'success')
      && (needs.license.result == 'success' || needs.license.result == 'skipped')
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker Meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ github.repository }}
            ghcr.io/${{ github.repository }}
          tags: |
            type=edge

      - name: Build and Push Image
        uses: tomy0000000/actions/build-push-image@main
        with:
          docker_password: ${{ secrets.DOCKER_PASSWORD }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    name: Deploy to Beta
    runs-on: ubuntu-latest
    environment: Beta
    needs: build
    if: ${{ always() && (needs.build.result == 'success') }}
    steps:
      - name: SSH and execute deployment
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          port: ${{ secrets.PORT }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          script_stop: true
          script: |
            cd tubee-beta
            docker pull tomy0000000/tubee:edge
            docker-compose up --detach
            docker network connect nginx_default tubee_app_beta
